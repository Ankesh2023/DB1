CREATE TABLE client_masteer (
    client_id NUMBER PRIMARY KEY,
    bal_due NUMBER);

INSERT INTO client_masteer (client_id, bal_due) VALUES (1, 100);
INSERT INTO client_masteer (client_id, bal_due) VALUES (2, -50);
INSERT INTO client_masteer (client_id, bal_due) VALUES (3, 200);
INSERT INTO client_masteer (client_id, bal_due) VALUES (4, -20);
INSERT INTO client_masteer (client_id, bal_due) VALUES (5, 150);

SET SERVEROUTPUT ON;
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM client_masteer
    WHERE bal_due < 0;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Business rule violated: Balance due cannot be less than 0.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLCODE || ' - ' || SQLERRM);
END;
/

2 -- Create the Employee and increment_salary tables
CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(100),
    salary NUMBER
);

CREATE TABLE increment_salary (
    emp_id NUMBER,
    old_salary NUMBER,
    new_salary NUMBER,
    increment_date DATE
);

-- Insert some sample data into Employee
INSERT INTO Employee (emp_id, emp_name, salary) VALUES (1, 'John Doe', 40000);
INSERT INTO Employee (emp_id, emp_name, salary) VALUES (2, 'Jane Smith', 42000);
INSERT INTO Employee (emp_id, emp_name, salary) VALUES (3, 'Michael Johnson', 38000);
INSERT INTO Employee (emp_id, emp_name, salary) VALUES (4, 'Emily Davis', 45000);

COMMIT;

-- PL/SQL block
SET SERVEROUTPUT ON;
DECLARE
    v_avg_salary NUMBER;
BEGIN
    -- Calculate the average salary of the organization
    SELECT AVG(salary)
    INTO v_avg_salary
    FROM Employee;
    
    -- Update the salary of employees less than the average salary
    FOR rec IN (SELECT * FROM Employee WHERE salary < v_avg_salary) LOOP
        UPDATE Employee
        SET salary = salary * 1.1
        WHERE emp_id = rec.emp_id;

        -- Insert record into increment_salary table
        INSERT INTO increment_salary (emp_id, old_salary, new_salary, increment_date)
        VALUES (rec.emp_id, rec.salary, rec.salary * 1.1, SYSDATE);

        DBMS_OUTPUT.PUT_LINE('Salary incremented for Employee ID ' || rec.emp_id || '.');
    END LOOP;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Salary increment process completed.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLCODE || ' - ' || SQLERRM);
END;
/